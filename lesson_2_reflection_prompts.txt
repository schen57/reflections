1. What happens when you initialize a repository? Why do you need to do it?

    When initialiing a repository, a metadata file is added as a hidden file to the repository. The hidden metadata file describes the files and versions and the status of different files in the repository. This is necessary for anyone wishes to work on a repository.

2. How is the staging area different from the working directory and the repository?
What value do you think it offers?

    The repository includes the collection of files and the metadata files. The working directory is current directory that git bash focuses on. Whenever a user makes a commit, the current version of the files and other metadata information is saved/commited to the repository. The intermediate step is the staging area. In the staging area is where the files and their versions and where the commits happen.

3. How can you use the staging area to make sure you have one commit per logical
change?

    In the staging area, there are several handy little tricks that can be applied to make sure that the changes between commits are incremental. The git diff shows the difference between the original files and the files in the staging area. This command can help one keep track the amount of changes that one would like to commit per commit.Before committing, checking the changes in the staging area can ensure such incremntality.

4. What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

    Branches are extremely helpful for several situations. For example, whenever I need to experiment and play around with the code. I can create a branch and play with codes. This experimentation and without the fear of running into problems / breaking the code too hard. Coz if when that happens. I can always rely on the safe copy saved in the master branch. The same functionality carries through with collaboration with peers.For example, a few of us would like to work on the same code together. We can then create several branches so that we can merge the files together and push them to the master branch later.

5. How do the diagrams help you visualize the branch structure?

    The digrams clearly and succinctly shows the diagram stucture and this is important for retracing back to the earlier versions where changes were made, complete with descriptions.This is also a good reminder for using the git checkout -b branch name command since some branches are essentialy non-reachable if no branch names were created for this purpose.

6. What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

    I have tried a lot of times in merging the branchs together but it seems there's always something wrong that prevents the auto merging between the two files. I have redone the previous steps to make sure that my master node was in the same condition as that of Caroline's. However, to no avail, somehting is still preventing me from merging them. I have checked the forum and it seems that some other people are experiencing similar problems as I do. They said that after watching later videos, their problems are pretty much solved. With this being said, I am going to move on and see those videos.

    The reson for the diagram is for ease of use and ease of reference. Because of the merging problem I have narrated above, I had to refer to the git branch command to see the structures of the modification steps that I have taken.

7. What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
